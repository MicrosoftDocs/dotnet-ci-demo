<Type Name="IServiceIncidentCollection" FullName="Microsoft.Store.PartnerCenter.ServiceIncidents.IServiceIncidentCollection">
  <TypeSignature Language="C#" Value="public interface IServiceIncidentCollection : Microsoft.Store.PartnerCenter.GenericOperations.IEntireEntityCollectionRetrievalOperations&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents,Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;&gt;, Microsoft.Store.PartnerCenter.IPartnerComponent, Microsoft.Store.PartnerCenter.IPartnerComponent&lt;string&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceIncidentCollection implements class Microsoft.Store.PartnerCenter.GenericOperations.IEntireEntityCollectionRetrievalOperations`2&lt;class Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents, class Microsoft.Store.PartnerCenter.Models.ResourceCollection`1&lt;class Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;&gt;, class Microsoft.Store.PartnerCenter.IPartnerComponent, class Microsoft.Store.PartnerCenter.IPartnerComponent`1&lt;string&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Store.PartnerCenter.ServiceIncidents.IServiceIncidentCollection" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceIncidentCollection&#xA;Implements IEntireEntityCollectionRetrievalOperations(Of ServiceIncidents, ResourceCollection(Of ServiceIncidents)), IPartnerComponent, IPartnerComponent(Of String)" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Store.PartnerCenter</AssemblyName>
    <AssemblyVersion>1.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Store.PartnerCenter.GenericOperations.IEntireEntityCollectionRetrievalOperations&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents,Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Store.PartnerCenter.IPartnerComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Store.PartnerCenter.IPartnerComponent&lt;System.String&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Defines the operations available on service incidents.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt; Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Store.PartnerCenter.Models.ResourceCollection`1&lt;class Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt; Get() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Store.PartnerCenter.ServiceIncidents.IServiceIncidentCollection.Get" />
      <MemberSignature Language="VB.NET" Value="Public Function Get () As ResourceCollection(Of ServiceIncidents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Store.PartnerCenter</AssemblyName>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Retrieves all service incidents.
            </summary>
        <returns>The service incidents.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;&gt; GetAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Store.PartnerCenter.Models.ResourceCollection`1&lt;class Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;&gt; GetAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Store.PartnerCenter.ServiceIncidents.IServiceIncidentCollection.GetAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync () As Task(Of ResourceCollection(Of ServiceIncidents))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Store.PartnerCenter</AssemblyName>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously retrieves all service incidents.
            </summary>
        <returns>The service incidents.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt; Query (Microsoft.Store.PartnerCenter.Models.Query.IQuery serviceIncidentsQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Store.PartnerCenter.Models.ResourceCollection`1&lt;class Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt; Query(class Microsoft.Store.PartnerCenter.Models.Query.IQuery serviceIncidentsQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Store.PartnerCenter.ServiceIncidents.IServiceIncidentCollection.Query(Microsoft.Store.PartnerCenter.Models.Query.IQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Function Query (serviceIncidentsQuery As IQuery) As ResourceCollection(Of ServiceIncidents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Store.PartnerCenter</AssemblyName>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceIncidentsQuery" Type="Microsoft.Store.PartnerCenter.Models.Query.IQuery" />
      </Parameters>
      <Docs>
        <param name="serviceIncidentsQuery">A query to retrieve service incidents based on the active status.
            The <see cref="T:Microsoft.Store.PartnerCenter.Models.Query.QueryFactory" /> can be used to build queries.
            Service incident queries support simple queries. You can filter service incidents using their active status.
            <see cref="T:Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidentSearchField" /> lists
            the supported search fields. You can use the <see cref="T:Microsoft.Store.PartnerCenter.Models.Query.FieldFilterOperation" /> enumeration to specify filtering operations.
            Supported filtering operations are: equals.
            </param>
        <summary>
            Queries service incidents.
            </summary>
        <returns> The list of service incidents that match the query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;&gt; QueryAsync (Microsoft.Store.PartnerCenter.Models.Query.IQuery serviceIncidentsQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Store.PartnerCenter.Models.ResourceCollection`1&lt;class Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;&gt; QueryAsync(class Microsoft.Store.PartnerCenter.Models.Query.IQuery serviceIncidentsQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Store.PartnerCenter.ServiceIncidents.IServiceIncidentCollection.QueryAsync(Microsoft.Store.PartnerCenter.Models.Query.IQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryAsync (serviceIncidentsQuery As IQuery) As Task(Of ResourceCollection(Of ServiceIncidents))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Store.PartnerCenter</AssemblyName>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Store.PartnerCenter.Models.ResourceCollection&lt;Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidents&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceIncidentsQuery" Type="Microsoft.Store.PartnerCenter.Models.Query.IQuery" />
      </Parameters>
      <Docs>
        <param name="serviceIncidentsQuery">A query to retrieve service incidents based on the active status.
            The <see cref="T:Microsoft.Store.PartnerCenter.Models.Query.QueryFactory" /> can be used to build queries.
            Service incident queries support simple queries. You can filter service incidents using their active status.
            <see cref="T:Microsoft.Store.PartnerCenter.Models.ServiceIncidents.ServiceIncidentSearchField" /> lists
            the supported search fields. You can use the <see cref="T:Microsoft.Store.PartnerCenter.Models.Query.FieldFilterOperation" /> enumeration to specify filtering operations.
            Supported filtering operations are: equals.
            </param>
        <summary>
            Asynchronously queries service incidents.
            </summary>
        <returns> The list of service incidents that match the query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>